{"remainingRequest":"D:\\tfgshop\\linjiashop-admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\tfgshop\\linjiashop-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\tfgshop\\linjiashop-admin\\src\\views\\system\\cfg\\cfg.js","dependencies":[{"path":"D:\\tfgshop\\linjiashop-admin\\src\\views\\system\\cfg\\cfg.js","mtime":1701070142000},{"path":"D:\\tfgshop\\linjiashop-admin\\babel.config.js","mtime":1701070142000},{"path":"D:\\tfgshop\\linjiashop-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tfgshop\\linjiashop-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tfgshop\\linjiashop-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { remove as _remove, getList, save as _save, exportXls as _exportXls, getByPrefix, saveGroup as _saveGroup } from '@/api/system/cfg';\nimport { getApiUrl } from '@/utils/utils';\nexport default {\n  name: 'cfg',\n  data: function data() {\n    return {\n      formVisible: false,\n      formTitle: this.$t('config.add'),\n      isAdd: true,\n      form: {\n        id: '',\n        cfgName: '',\n        cfgValue: '',\n        cfgDesc: ''\n      },\n      listQuery: {\n        page: 1,\n        limit: 20,\n        cfgName: undefined,\n        cfgValue: undefined\n      },\n      total: 0,\n      list: null,\n      listLoading: true,\n      selRow: {},\n      actvieGroup: 'all',\n      cfgGroups: [{\n        name: '全部配置',\n        value: 'all'\n      }, {\n        name: '系统配置',\n        value: 'system'\n      }, {\n        name: '公众号配置',\n        value: 'weixin'\n      }, {\n        name: '消息配置',\n        value: 'api.tencent.sms'\n      }],\n      cfgList: [],\n      cfg: {}\n    };\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  computed: {\n    rules: function rules() {\n      return {\n        cfgName: [{\n          required: true,\n          message: this.$t('config.name') + this.$t('common.isRequired'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 128,\n          message: this.$t('config.name') + this.$t('config.lengthValidation'),\n          trigger: 'blur'\n        }],\n        cfgValue: [{\n          required: true,\n          message: this.$t('config.value') + this.$t('common.isRequired'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          message: this.$t('config.value') + this.$t('config.lengthValidationCfgValue'),\n          trigger: 'blur'\n        }]\n      };\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n      this.listLoading = true;\n      getList(this.listQuery).then(function (response) {\n        _this.list = response.data.records;\n        _this.listLoading = false;\n        _this.total = response.data.total;\n      });\n    },\n    search: function search() {\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    reset: function reset() {\n      this.listQuery.cfgName = '';\n      this.listQuery.cfgValue = '';\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleClose: function handleClose() {},\n    fetchNext: function fetchNext() {\n      this.listQuery.page = this.listQuery.page + 1;\n      this.fetchData();\n    },\n    fetchPrev: function fetchPrev() {\n      this.listQuery.page = this.listQuery.page - 1;\n      this.fetchData();\n    },\n    fetchPage: function fetchPage(page) {\n      this.listQuery.page = page;\n      this.fetchData();\n    },\n    changeSize: function changeSize(limit) {\n      this.listQuery.limit = limit;\n      this.fetchData();\n    },\n    handleCurrentChange: function handleCurrentChange(currentRow, oldCurrentRow) {\n      this.selRow = currentRow;\n    },\n    resetForm: function resetForm() {\n      this.form = {\n        id: '',\n        cfgName: '',\n        cfgValue: '',\n        cfgDesc: ''\n      };\n    },\n    add: function add() {\n      this.resetForm();\n      this.formTitle = this.$t('config.add');\n      this.formVisible = true;\n      this.isAdd = true;\n    },\n    save: function save() {\n      var _this2 = this;\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          _save({\n            id: _this2.form.id,\n            cfgName: _this2.form.cfgName,\n            cfgValue: _this2.form.cfgValue,\n            cfgDesc: _this2.form.cfgDesc\n          }).then(function (response) {\n            _this2.$message({\n              message: _this2.$t('common.optionSuccess'),\n              type: 'success'\n            });\n            _this2.fetchData();\n            _this2.formVisible = false;\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    checkSel: function checkSel() {\n      if (this.selRow && this.selRow.id) {\n        return true;\n      }\n      this.$message({\n        message: this.$t('common.mustSelectOne'),\n        type: 'warning'\n      });\n      return false;\n    },\n    edit: function edit() {\n      if (this.checkSel()) {\n        this.isAdd = false;\n        this.form = this.selRow;\n        this.formTitle = this.$t('config.edit');\n        this.formVisible = true;\n      }\n    },\n    remove: function remove() {\n      var _this3 = this;\n      if (this.checkSel()) {\n        var id = this.selRow.id;\n        this.$confirm(this.$t('common.deleteConfirm'), this.$t('common.tooltip'), {\n          confirmButtonText: this.$t('button.submit'),\n          cancelButtonText: this.$t('button.cancel'),\n          type: 'warning'\n        }).then(function () {\n          _remove(id).then(function (response) {\n            _this3.$message({\n              message: _this3.$t('common.optionSuccess'),\n              type: 'success'\n            });\n            _this3.fetchData();\n          });\n        }).catch(function () {});\n      }\n    },\n    exportXls: function exportXls() {\n      _exportXls(this.listQuery).then(function (response) {\n        window.location.href = getApiUrl() + '/file/download?idFile=' + response.data.id;\n      });\n    },\n    changeGroup: function changeGroup(tab, event) {\n      var _this4 = this;\n      if (tab.name === 'all') {\n        return;\n      }\n      getByPrefix({\n        cfgGroup: tab.name\n      }).then(function (response) {\n        _this4.cfgList = response.data.list;\n        _this4.cfg = response.data.map;\n      });\n    },\n    saveGroup: function saveGroup() {\n      var _this5 = this;\n      _saveGroup({\n        json: JSON.stringify(this.cfg)\n      }).then(function (response) {\n        _this5.$message({\n          message: _this5.$t('common.optionSuccess'),\n          type: 'success'\n        });\n        _this5.fetchData();\n      });\n    }\n  }\n};",null]}