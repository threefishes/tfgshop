{"remainingRequest":"/home/linjiashop/linjiashop-admin/node_modules/thread-loader/dist/cjs.js!/home/linjiashop/linjiashop-admin/node_modules/babel-loader/lib/index.js!/home/linjiashop/linjiashop-admin/src/utils/request.js","dependencies":[{"path":"/home/linjiashop/linjiashop-admin/src/utils/request.js","mtime":1701070142166},{"path":"/home/linjiashop/linjiashop-admin/babel.config.js","mtime":1701070142140},{"path":"/home/linjiashop/linjiashop-admin/node_modules/cache-loader/dist/cjs.js","mtime":1701072373500},{"path":"/home/linjiashop/linjiashop-admin/node_modules/thread-loader/dist/cjs.js","mtime":1701072371351},{"path":"/home/linjiashop/linjiashop-admin/node_modules/babel-loader/lib/index.js","mtime":1701072375263}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport router from '@/router';\n// create an axios instance\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: false,\n  // send cookies when cross-domain requests\n  timeout: 30000 // request timeout\n});\n\n// request interceptor\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  var token = getToken();\n  if (token) {\n    config.headers['Authorization'] = token; // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  return Promise.reject(error);\n});\n\n// response interceptor\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var res = response.data;\n  if (response.headers.token) {\n    //如果后台通过header返回token，说明token已经更新，则更新客户端本地token\n    store.dispatch('user/updateToken', {\n      token: response.headers.token\n    });\n  }\n  // if the custom code is not 20000, it is judged as an error.\n  if (res.code !== 20000) {\n    Message({\n      message: res.msg || 'error',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n      // to re-login\n      MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n        confirmButtonText: 'Re-Login',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    }\n    return Promise.reject(res);\n  } else {\n    return res;\n  }\n}, function (error) {\n  if (error.response.status === 401) {\n    store.dispatch('user/logout').then(function () {\n      router.replace({\n        path: '/login',\n        query: {\n          redirect: router.currentRoute.path\n        }\n      });\n    });\n    return;\n  }\n  var errorMsg = '';\n  try {\n    errorMsg = error.response.data.errors[0].defaultMessage;\n  } catch (e) {\n    errorMsg = error.response.data.message;\n  }\n  Message({\n    message: errorMsg,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",null]}