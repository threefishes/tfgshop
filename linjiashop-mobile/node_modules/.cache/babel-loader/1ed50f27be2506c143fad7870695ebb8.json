{"remainingRequest":"/home/linjiashop/linjiashop-mobile/node_modules/thread-loader/dist/cjs.js!/home/linjiashop/linjiashop-mobile/node_modules/babel-loader/lib/index.js!/home/linjiashop/linjiashop-mobile/src/utils/request.js","dependencies":[{"path":"/home/linjiashop/linjiashop-mobile/src/utils/request.js","mtime":1701070142210},{"path":"/home/linjiashop/linjiashop-mobile/babel.config.js","mtime":1701070142207},{"path":"/home/linjiashop/linjiashop-mobile/node_modules/cache-loader/dist/cjs.js","mtime":1701139867369},{"path":"/home/linjiashop/linjiashop-mobile/node_modules/thread-loader/dist/cjs.js","mtime":1701139866811},{"path":"/home/linjiashop/linjiashop-mobile/node_modules/babel-loader/lib/index.js","mtime":1701139868485}],"contextDependencies":[],"result":["import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport { router } from '@/router';\nimport store from '@/store';\nimport storage from '@/utils/storage';\n// create an axios instance\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: false,\n  // send cookies when cross-domain requests\n  timeout: 15000 // request timeout\n});\n\n// request interceptor\nservice.interceptors.request.use(function (config) {\n  if (storage.getToken()) {\n    // 让每个请求携带自定义token 请根据实际情况自行修改\n    config.headers['Authorization'] = storage.getToken();\n  }\n  return config;\n}, function (error) {\n  // do something with request error\n  return Promise.reject(error);\n});\n\n// response interceptor\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  console.log('response', response);\n  if (response.headers.token) {\n    //如果后台通过header返回token，说明token已经更新，则更新客户端本地token\n    store.dispatch('app/toggleToken', response.headers.token);\n  }\n  var res = response.data;\n  if (res.code !== 20000) {\n    return Promise.reject(res.msg || 'error');\n  } else {\n    return res;\n  }\n}, function (error) {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        //如果后台返回401，则清空本地用户信息信息并跳转至登录页\n        store.dispatch('app/toggleUser', {});\n        store.dispatch('app/toggleToken', '');\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.currentRoute.path\n          }\n        });\n        return Promise.reject(error.response.data.message);\n        break;\n      case 500:\n        if (error.response.data.message) {\n          if (error.response.data.message.indexOf('relogin') > -1) {\n            store.dispatch('app/toggleUser', {});\n            store.dispatch('app/toggleToken', '');\n            router.replace({\n              path: '/login',\n              query: {\n                redirect: router.currentRoute.path\n              }\n            });\n            return Promise.reject(error.response.data.message);\n          } else if (error.response.data.message.indexOf('该手机号已经绑定其他微信号') > -1) {\n            store.dispatch('app/toggleUser', {});\n            store.dispatch('app/toggleToken', '');\n            _Toast.fail(error.response.data.message);\n            router.replace({\n              path: '/login',\n              query: {\n                redirect: router.currentRoute.path\n              }\n            });\n            return Promise.reject(error.response.data.message);\n          } else {\n            _Toast.fail(error.response.data.message);\n            return Promise.reject(error.response.data.message);\n          }\n        }\n        break;\n      default:\n        return Promise.reject(error.response.data.message);\n    }\n  }\n});\nexport default service;",null]}